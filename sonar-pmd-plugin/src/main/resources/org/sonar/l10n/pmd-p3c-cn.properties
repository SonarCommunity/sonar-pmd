##p3c##
#AlibabaJavaComments
rule.pmd-p3c.CommentsMustBeJavadocFormatRule.name=[p3c]类、类属性、类方法的注释必须使用javadoc规范，使用/**内容*/格式，不得使用//xxx方式和/*xxx*/方式。
rule.pmd-p3c.AbstractMethodOrInterfaceMethodMustUseJavadocRule.name=[p3c]所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。
rule.pmd-p3c.ClassMustHaveAuthorRule.name=[p3c]所有的类都必须添加创建者信息和创建日期
rule.pmd-p3c.EnumConstantsMustHaveCommentRule.name=[p3c]所有的枚举类型字段必须要有注释，说明每个数据项的用途。
rule.pmd-p3c.AvoidCommentBehindStatementRule.name=[p3c]方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释。注意与代码对齐。
rule.pmd-p3c.RemoveCommentedCodeRule.name=[p3c]及时清理不再使用的代码段或配置信息

#AlibabaJavaConcurrent
rule.pmd-p3c.ThreadPoolCreationRule.name=[p3c]手动创建线程池，效果会更好哦。
rule.pmd-p3c.AvoidManuallyCreateThreadRule.name=[p3c]线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。
rule.pmd-p3c.AvoidUseTimerRule.name=[p3c]使用ScheduledExecutorService代替Timer吧
rule.pmd-p3c.ThreadShouldSetNameRule.name=[p3c]创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。创建线程池的时候请使用带ThreadFactory的构造函数，并且提供自定义ThreadFactory实现或者使用第三方实现。
rule.pmd-p3c.AvoidCallStaticSimpleDateFormatRule.name=[p3c]SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类。
rule.pmd-p3c.ThreadLocalShouldRemoveRule.name=[p3c]ThreadLocal字段应该至少调用一次remove()方法。
rule.pmd-p3c.AvoidConcurrentCompetitionRandomRule.name=[p3c]Math.random()应避免在多线程并发环境下使用。
rule.pmd-p3c.CountDownShouldInFinallyRule.name=[p3c]CountDown应该在finally块中调用。
rule.pmd-p3c.LockShouldWithTryFinallyRule.name=[p3c]锁必须紧跟try代码块，且unlock要放到finally第一行。

#AlibabaJavaConstants
rule.pmd-p3c.UpperEllRule.name=[p3c]long或者Long初始赋值时，必须使用大写的'L'，不能是小写的'l'，小写容易跟数字1混淆，造成误解
rule.pmd-p3c.UndefineMagicConstantRule.name=[p3c]不允许任何魔法值（即未经定义的常量）直接出现在代码中。

#AlibabaJavaExceptions
rule.pmd-p3c.MethodReturnWrapperTypeRule.name=[p3c]返回类型为基本数据类型，return包装数据类型的对象时，自动拆箱有可能产生NPE
rule.pmd-p3c.AvoidReturnInFinallyRule.name=[p3c]不能在finally块中使用return，finally块中的return返回后方法结束执行，不会再执行try块中的return语句。
rule.pmd-p3c.TransactionMustHaveRollbackRule.name=[p3c]注解[Transactional]需要设置rollbackFor属性。

#AlibabaJavaFlowControl
rule.pmd-p3c.SwitchStatementRule.name=[p3c]switch块缺少default语句
rule.pmd-p3c.NeedBraceRule.name=[p3c]在if/else/for/while/do语句中必须使用大括号，即使只有一行代码，避免使用下面的形式：if (condition) statements;
rule.pmd-p3c.AvoidComplexConditionRule.name=[p3c]请不要在条件中使用复杂的表达式
rule.pmd-p3c.AvoidNegationOperatorRule.name=[p3c]"!"运算符不利于快速理解。

#AlibabaJavaNaming
rule.pmd-p3c.ClassNamingShouldBeCamelRule.name=[p3c]类名使用UpperCamelCase风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / BO / DTO / VO / DAO
rule.pmd-p3c.AbstractClassShouldStartWithAbstractNamingRule.name=[p3c]抽象类命名应以Abstract或Base开头
rule.pmd-p3c.ExceptionClassShouldEndWithExceptionRule.name=[p3c]异常命名应以Exception结尾
rule.pmd-p3c.TestClassShouldEndWithTestNamingRule.name=[p3c]测试类命名以它要测试的类的名称开始，以Test结尾
rule.pmd-p3c.LowerCamelCaseVariableNamingRule.name=[p3c]方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase，必须遵从驼峰形式
rule.pmd-p3c.AvoidStartWithDollarAndUnderLineNamingRule.name=[p3c]所有编程相关的命名均不能以下划线或美元符号开始
rule.pmd-p3c.ServiceOrDaoClassShouldEndWithImplRule.name=[p3c]对于Service和DAO类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别
rule.pmd-p3c.ConstantFieldShouldBeUpperCaseRule.name=[p3c]常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长
rule.pmd-p3c.PackageNamingRule.name=[p3c]包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式
rule.pmd-p3c.BooleanPropertyShouldNotStartWithIsRule.name=[p3c]POJO类中的任何布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误
rule.pmd-p3c.ArrayNamingShouldHaveBracketRule.name=[p3c]中括号是数组类型的一部分，数组定义如下：String[] args

#AlibabaJavaOop
rule.pmd-p3c.EqualsAvoidNullRule.name=[p3c]Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。
rule.pmd-p3c.WrapperTypeEqualityRule.name=[p3c]所有的包装类对象之间值的比较，全部使用equals方法比较。
rule.pmd-p3c.PojoMustUsePrimitiveFieldRule.name=[p3c]字段应使用包装类型
rule.pmd-p3c.PojoNoDefaultValueRule.name=[p3c]定义DO/DTO/VO等POJO类时，不要加任何属性默认值。
rule.pmd-p3c.PojoMustOverrideToStringRule.name=[p3c]POJO类必须写toString方法。使用工具类source> generate toString时，如果继承了另一个POJO类，注意在前面加一下super.toString。
rule.pmd-p3c.StringConcatRule.name=[p3c]循环体内，字符串的联接方式，使用StringBuilder的append方法进行扩展。
rule.pmd-p3c.BigDecimalAvoidDoubleConstructorRule.name=[p3c]禁止使用构造方法BigDecimal(double)的方式把double值转化为BigDecimal对象

#AlibabaJavaOthers
rule.pmd-p3c.AvoidPatternCompileInMethodRule.name=[p3c]在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。
rule.pmd-p3c.AvoidApacheBeanUtilsCopyRule.name=[p3c]避免用Apache Beanutils进行属性的copy。
rule.pmd-p3c.AvoidNewDateGetTimeRule.name=[p3c]获取当前毫秒数：System.currentTimeMillis(); 而不是new Date().getTime();
rule.pmd-p3c.AvoidMissUseOfMathRandomRule.name=[p3c]注意 Math.random() 这个方法返回是double类型，注意取值的范围[0,1)(能够取到零值，注意除零异常),如果想获取整数类型的随机数直接使用Random对象的nextInt或者nextLong方法。
rule.pmd-p3c.MethodTooLongRule.name=[p3c]单个方法的总行数不超过80行
rule.pmd-p3c.UseRightCaseForDateFormatRule.name=[p3c]日期格式化字符串[%s]使用错误，应注意使用小写‘y’表示当天所在的年，大写‘Y’代表week in which year。
rule.pmd-p3c.AvoidDoubleOrFloatEqualCompareRule.name=[p3c]浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals来判断


#AlibabaJavaSets
rule.pmd-p3c.ClassCastExceptionWithToArrayRule.name=[p3c]使用集合转数组的方法，不能使用toArray(), 必须使用集合的toArray(T[] array)，传入的是类型完全一样的数组，大小就是list.size()
rule.pmd-p3c.UnsupportedExceptionWithModifyAsListRule.name=[p3c]使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedOperationException异常。
rule.pmd-p3c.ClassCastExceptionWithSubListToArrayListRule.name=[p3c] ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常。
rule.pmd-p3c.ConcurrentExceptionWithModifyOriginSubListRule.name=[p3c]在subList场景中，高度注意对原列表的修改，会导致子列表的遍历、增加、删除均产生ConcurrentModificationException异常。
rule.pmd-p3c.DontModifyInForeachCircleRule.name=[p3c]不要在foreach循环里进行元素的remove/add操作，remove元素请使用Iterator方式。
rule.pmd-p3c.CollectionInitShouldAssignCapacityRule.name=[p3c]HashMap使用如下构造方法进行初始化，如果暂时无法确定集合大小，那么指定默认值（16）即可

#misc
rule.pmd-p3c.IbatisMethodQueryForListRule.name=[p3c]iBATIS自带的com.ibatis.sqlmap.client.SqlMapClient.queryForList(String statementName,int start,int size)不推荐使用
